{"pageProps":{"proj_id":"masc","project":{"img":[324,174,"/icons/masc.png"],"title":"masc","body":["A programming language that compiles to human-readable mips assembly."],"technologies":["typescript","assembly"],"github":{"repo":"pfgithub/masc","branch":"master","file":"README.md"},"site":{"kind":"demo","url":"https://pfg.pw/masc"}},"project_readme":{"text":"<html><head></head><body><p>web demo: <a href=\"https://pfg.pw/masc\" target=\"_blank\" rel=\"noopener\">https://pfg.pw/masc</a></p>\n<div class=\"markdown-heading\"><h1 class=\"heading-element\">mips masc</h1><a id=\"user-content-mips-masc\" class=\"anchor\" aria-label=\"Permalink: mips masc\" href=\"https://github.com/pfgithub/masc/blob/master/#mips-masc\" target=\"_blank\" rel=\"noopener\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a></div>\n<p>generate mips from human code</p>\n<p>example:</p>\n<div class=\"highlight highlight-source-zig\"><pre><span class=\"pl-s\">\\\\.text</span>\n<span class=\"pl-s\">\\\\j main</span>\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">gcd</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-k\">i32</span>, <span class=\"pl-v\">b</span>: <span class=\"pl-k\">i32</span>) <span class=\"pl-k\">i32</span> {\n    <span class=\"pl-k\">if</span> <span class=\"pl-v\">b</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span> {<span class=\"pl-k\">return</span> <span class=\"pl-v\">a</span>;}\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">gcd</span>(<span class=\"pl-v\">b</span>, <span class=\"pl-v\">a</span><span class=\"pl-k\">%</span><span class=\"pl-v\">b</span>);\n}\n\n<span class=\"pl-s\">\\\\main:</span>\n\n<span class=\"pl-v\">print_int</span>(<span class=\"pl-v\">gcd</span>(<span class=\"pl-c1\">25</span>, <span class=\"pl-c1\">15</span>));\n\n<span class=\"pl-c\">// ----- //</span>\n\n<span class=\"pl-k\">inline</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">print_int</span>(<span class=\"pl-v\">value</span>: <span class=\"pl-k\">i32</span>) <span class=\"pl-k\">void</span> {\n\t$<span class=\"pl-v\">v0</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>;\n\t$<span class=\"pl-v\">a0</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">value</span>;\n\t<span class=\"pl-v\">syscall</span>();\n}\n<span class=\"pl-k\">inline</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">syscall</span>() <span class=\"pl-k\">void</span> {\n\t<span class=\"pl-s\">\\\\syscall</span>\n\t<span class=\"pl-k\">!</span><span class=\"pl-v\">clear</span> $<span class=\"pl-v\">call</span>;\n}</pre></div>\n<p align=\"center\">↓</p>\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\">.text                                             </span><span class=\"pl-c\"><span class=\"pl-c\">#</span> .text</span>\n<span class=\"pl-s\">j main                                            </span><span class=\"pl-c\"><span class=\"pl-c\">#</span> j main</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ====================</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> jal call_gcd</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> args:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>    $a0: a - i32</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>    $a1: b - i32</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> return:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>    $v0: i32</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ====================</span>\n<span class=\"pl-ent\">call_gcd</span>:                                         <span class=\"pl-c\"><span class=\"pl-c\">#</span> fn gcd(a: i32, b: i32) i32{</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> save used s registers to stack</span>\n    <span class=\"pl-s\">subiu $sp, $sp, 4                             </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     $sp = &amp;$sp[-1]</span>\n    <span class=\"pl-s\">sw $ra, 0($sp)                                </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     $sp[0] = $ra</span>\n                                                  <span class=\"pl-c\"><span class=\"pl-c\">#</span></span>\n    <span class=\"pl-s\">move $t0 $a0                                  </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     a = $a0</span>\n    <span class=\"pl-s\">move $t1 $a1                                  </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     b = $a1</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> body</span>\n    <span class=\"pl-s\">bnez $t1, if_end                              </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     if b == 0 {</span>\n        <span class=\"pl-s\">move $v0 $t0                              </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>         .      a</span>\n        <span class=\"pl-s\">j deinit_gcd                              </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>         return ^;</span>\n    <span class=\"pl-ent\">if_end</span>:                                       <span class=\"pl-c\"><span class=\"pl-c\">#</span>     }</span>\n    <span class=\"pl-s\">move $a0 $t1                                  </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     .               b</span>\n    <span class=\"pl-s\">rem $a1, $t0 $t1                              </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     |                  a % b</span>\n    <span class=\"pl-s\">jal call_gcd                                  </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     |           gcd(^, ^^^^^)</span>\n    <span class=\"pl-s\">move $v0, $v0                                 </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     return$v0 = ^^^^^^^^^^^^^</span>\n                                                  <span class=\"pl-c\"><span class=\"pl-c\">#</span></span>\n<span class=\"pl-ent\">deinit_gcd</span>:                                       <span class=\"pl-c\"><span class=\"pl-c\">#</span> cleanup:</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> reload used s registers from stack</span>\n    <span class=\"pl-s\">lw $ra, 0($sp)                                </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     $ra = $sp[0]</span>\n    <span class=\"pl-s\">addiu $sp, $sp, 4                             </span><span class=\"pl-c\"><span class=\"pl-c\">#</span>     $sp = &amp;$sp[1]</span>\n<span class=\"pl-s\">jr $ra                                            </span><span class=\"pl-c\"><span class=\"pl-c\">#</span> }</span>\n<span class=\"pl-ent\">main</span>:                                             <span class=\"pl-c\"><span class=\"pl-c\">#</span> main:</span>\n<span class=\"pl-s\">li $a0 25                                         </span><span class=\"pl-c\"><span class=\"pl-c\">#</span> .             25</span>\n<span class=\"pl-s\">li $a1 15                                         </span><span class=\"pl-c\"><span class=\"pl-c\">#</span> |                 15</span>\n<span class=\"pl-s\">jal call_gcd                                      </span><span class=\"pl-c\"><span class=\"pl-c\">#</span> |         gcd(^^, ^^)</span>\n<span class=\"pl-s\">move $t0, $v0                                     </span><span class=\"pl-c\"><span class=\"pl-c\">#</span> |         ^^^^^^^^^^^</span>\n<span class=\"pl-s\">li $v0 1                                          </span><span class=\"pl-c\"><span class=\"pl-c\">#</span> print_int(^^^^^^^^^^^)</span>\n<span class=\"pl-s\">move $a0 $t0                                      </span><span class=\"pl-c\"><span class=\"pl-c\">#</span></span>\n<span class=\"pl-s\">syscall                                           </span><span class=\"pl-c\"><span class=\"pl-c\">#</span></span></pre></div>\n<div class=\"markdown-heading\"><h2 class=\"heading-element\">syntax</h2><a id=\"user-content-syntax\" class=\"anchor\" aria-label=\"Permalink: syntax\" href=\"https://github.com/pfgithub/masc/blob/master/#syntax\" target=\"_blank\" rel=\"noopener\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a></div>\n<p>inspired by zig.</p>\n<p><a href=\"https://github.com/pfgithub/masc/tree/master/src/tests\" target=\"_blank\" rel=\"noopener\">examples</a>.</p>\n<p>statement:</p>\n<ul>\n<li>\n<code>var varname: TYPE = EXPRESSION;</code> - define variable</li>\n<li>\n<code>variable | register = EXPRESSION;</code> - set variable. eg <code>myvar = 3;</code> or <code>$v0 = 5;</code>\n</li>\n<li>\n<code>save EXPRESSION = EXPRESSION</code> - save into memory. eg <code>save myptr.* = 25;</code>. you may wonder why this is not just <code>myptr.* = 25;</code>. it should be.</li>\n<li>\n<code>inline? fn function_name(arg_name: TYPE, ...) { STATEMENT... }</code> - define ¿inline? function. make sure to jump over functions.\nfunctions will save any needed things to the stack (and unneeded because they will always save $ra even if they don't call any functions oops)</li>\n<li>\n<code>loop { STATEMENT ... }</code> - loop forever. break/continue out of the loop.</li>\n<li>\n<code>if EXPRESSION operator EXPRESSION { STATEMENT... }</code> - expression: <code>&lt;=</code>, <code>&lt;</code>, <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&gt;=</code>.</li>\n<li>\n<code>!clear $ra, $call, ...</code> - tell the register allocator that these variables cannot be used. <code>$call</code> expands into $t0-7, $a0-4, $ra, $v0-1. this way, using a variable across a syscall makes it go into $s0-7.</li>\n<li>\n<code>\\\\inline assembly...</code> - inline assembly currently has no option to use variables. make sure to !clear any used registers after inline assembly. eg: <code>\\syscall</code>\n</li>\n<li>\n<code>return EXPRESSION?;</code> - return a value from a function</li>\n<li>\n<code>break;</code> - break from a loop</li>\n<li>\n<code>continue;</code> - continue in a loop</li>\n</ul>\n<p>types:</p>\n<ul>\n<li>\n<code>u32</code>, <code>i32</code>, <code>u8</code> - unsigned and signed integer types</li>\n<li>\n<code>[*]TYPE</code> - pointer to array (indexable, math supported)</li>\n<li>\n<code>*TYPE</code> - pointer to one (not indexable, no math)</li>\n<li>\n<code>void</code> - nothing. for use as a return value</li>\n<li>\n<code>any</code> - any value (up to 32 bits)</li>\n</ul>\n<p>expression:</p>\n<ul>\n<li><code>variable_name</code></li>\n<li>\n<code>@TYPE:data_name</code> - get something from the .data section with name data_name and type TYPE. example: <code>@i32:len</code> or <code>@[*]i32:x[25]</code>. masc doesn't help with defining items in the .data section, do it yourself.</li>\n<li>\n<code>$register_name</code> - use a register</li>\n<li>\n<code>function_name(EXPRESSION, ...)</code> - call a function</li>\n<li>\n<code>EXPRESSION + - * / ^ % EXPRESSION</code> - math. eg <code>1 + 1</code> or <code>5 * 3 + 6 % 8</code>. <code>^</code> is binary xor.</li>\n<li>\n<code>EXPRESSION[EXPRESSION]</code> - index array, eg <code>somearray[5]</code>\n</li>\n<li>\n<code>EXPRESSION.*</code> - get value of pointer, eg <code>somepointer.*</code>\n</li>\n<li>\n<code>&amp;EXPRESSION</code> - address of expression, eg <code>&amp;somepointer[2]</code>\n</li>\n<li>\n<code>undefined</code> - anything. eg <code>var varname: u32 = undefined;</code>\n</li>\n<li>\n<code>25</code> - any number, eg <code>-8</code> or <code>5325</code>. no binary literals, hex literals, or floating point numbers supported.</li>\n</ul>\n<p>comments:</p>\n<ul>\n<li>\n<code>// asdfnjdksalk</code> - comment that will not be visible in the output code</li>\n<li>\n<code>/* asdfnjdks */</code> - comment that will not be visible in the output code</li>\n<li>\n<code>\\\\# comment that will be visible in the output code</code> (inline assembly \"#\")</li>\n<li>\n<code>\\\\</code> - newline that will be visible in the output code</li>\n</ul>\n<p>there's probably more that I'm missing. look at the examples.</p>\n<div class=\"markdown-heading\"><h2 class=\"heading-element\">notes</h2><a id=\"user-content-notes\" class=\"anchor\" aria-label=\"Permalink: notes\" href=\"https://github.com/pfgithub/masc/blob/master/#notes\" target=\"_blank\" rel=\"noopener\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a></div>\n<p>all variables are stored in a register. if you run out of registers, save some\nthings to the stack manually yourself.</p>\n<div class=\"markdown-heading\"><h2 class=\"heading-element\">issues</h2><a id=\"user-content-issues\" class=\"anchor\" aria-label=\"Permalink: issues\" href=\"https://github.com/pfgithub/masc/blob/master/#issues\" target=\"_blank\" rel=\"noopener\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a></div>\n<ul>\n<li>no parenthesis expression. you can't do <code>(1 + 1) * 2</code>\n</li>\n<li>newlines have to be explicitly preserved</li>\n<li>inline function call comments are all on one line</li>\n<li>no strings, no way to make a print function</li>\n<li>no way to make a macro fn</li>\n<li>lots of missing integer types</li>\n<li>supporting larger types (eg doubles) would require a pretty big refactor probably</li>\n<li>too many registers has no position associated with the error</li>\n<li>register allocation bugs probably</li>\n<li>intermediate representation is using untyped strings and regex replace rather than actual objects</li>\n</ul>\n</body></html>"}},"__N_SSG":true}